package dataframe;

	//单向链表

	public class LinkedList <E> {
		
		//节点(内部类:内部有构造器)
		private class Node{
			
			//此节点的数据(数据域)
			private E data;
			
			//下一个元素的指针(指针域)
			private Node next;
			
			//下面的构造器有顺序(必须按照参数从少到多)
			//空参构造器
			public Node() {
				//this 是调用的其他构造器里面的
				this(null,null);
			}
			
			//只知道一个参数的构造器
			public Node(E data) {
				this(data,null);
			}
			
			//知道两个参数的构造器
			public Node(E data,Node next) {
				this.data = data;
				this.next = next;
			}
			
		}
		//链表长度
		private int size;
		
		//虚拟头节点(计算机能识别)
		private Node dummyHead;
		
		//空参构造器
		public LinkedList() {
			this.size = 0;
			//因为dummyHead是 Node 类型的
			dummyHead = new Node();
		}
		
		//在指定位置添加
		public boolean add(int index,E data) {
			if(index < 0 || index > size) {
				throw new IllegalArgumentException("位置错误");
			}
			//造对象(节点)
			Node prev = dummyHead;				//prev是要插入元素位置的前一个元素的位置
			
			//第一步：先找到prev的位置
			for (int i = 0;i < index;i++) {
				prev = prev.next;
			}
			
			//再创建一个对象(要添加的元素s)
			Node node = new Node();
			
			//1.先将prev指向next的指针域传给要添加的元素s的指针域 
			node.next = prev.next;
			//2.再将prev的指针域指向要添加的元素s
			prev.next = node;
			size ++;
			return true;
		}
		
		//删除指定位置的元素
	public E delete(int index,E data) {
		if(index < 0 || index >= size) {
			throw new IllegalArgumentException("位置错误");
		}
		if(size == 0) {
			throw new IllegalArgumentException("位置错误");
		}
		
		//一条链上只有一个头节点
		Node prev = dummyHead;
		for (int i = 0;i < index;i++) {
			prev = prev.next;
		}
		
		//记录删除的节点
		Node result = new Node();
		//1.把prev的指针域赋值给目标删除元素
		prev.next = result.next;
		//2.把result的指针域删掉
		result.next = null;
		//维护size的值
		size --;
		//返回result的数据域
		return result.data;
	}
	
	//查找链表里面是否有某个元素
	public boolean contain(E data) {
		//从头节点的下一个开始查
		Node current = dummyHead.next;
		for(int i = 0;i < size;i++) {
			if(current.data.equals(data)) {
				return true;
			}
		}
				
		return false;
	}
}
